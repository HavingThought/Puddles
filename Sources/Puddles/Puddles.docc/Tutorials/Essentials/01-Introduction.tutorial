@Tutorial(time: 10) {
    @Intro(title: "The Provider") {
        Building an app using `Puddles` is easy and fast.
        @Image(source: "Background1.png", alt: "A colorful, abstract background image") 
    }
    
    @Section(title: "The Root Provider") {
        
        The first step is to setup a root ``Puddles/Provider`` that acts as the entry point of the app.
        
        @Steps {
            @Step {
                Create a new struct and conform it to ``Puddles/Provider``.
       
                @Code(name: "Root.swift", file: "essentials-01-01")
            }
            
            @Step {
                Add the required property to `entryView`.
                
                For now, let's display a simple `Text`.
                @Code(name: "Root.swift", file: "essentials-01-02")
            }
            
            That's the most basic `Provider` possible. We can now set it as the app's entry point.
            
            @Step {
                Set `Root` as the root view of the app and run it.
                
                This is possible because `Provider` conforms to the `View` protocol!
                @Code(name: "FirstChapterApp.swift", file: "essentials-01-03") {
                    @Image(source: "tutorial_essentials_01_02", alt: "A screenshot of an iPhone running the app. It shows the text 'Hello, World'.")
                }
            }
            
            In the next section, we will add a dedicated entry view for the `Provider`.
        }
    }
    
    @Section(title: "The Home View") {
        We will now add a dedicated home view that we can use in `Root` (or any other `Provider` later on).
        
        @Steps {
            @Step {
                Create a new SwiftUI view called `HomeView`.
                @Code(name: "HomeView.swift", file: "essentials-02-01")
            }
            
            Next, the view needs a place to hold public state that can be created by and managed through a `Provider`.
            
            @Step {
                Create and add a `ViewState` to `HomeView`.
                
                Notice that the view itself cannot manipulate the state. That is the job of a `Provider`.
                
                @Code(name: "HomeView.swift", file: "essentials-02-02")
            }
                    
            @Step {
                Add a simple view that shows a button and a label stating how many times the button has been tapped.
                @Code(name: "HomeView.swift", file: "essentials-02-03") {
                    @Image(source: "tutorial_01_essentials_02_03", alt: "A screenshot of an iPhone running the app. It shows the home view.")
                }
            }
            
            @Step {
                Leave the button's action closure empty for now.
                
                In the next tutorial, we will look at a way to update the view's state.
                @Code(name: "HomeView.swift", file: "essentials-02-04")
            }
            
            @Step {
                Go back to `Root.swift`.
                @Code(name: "Root.swift", file: "essentials-02-05")
            }
            
            @Step {
                Add the newly created `HomeView` and set it as the provider's entry view.
                
                Notice that the `Provider` holds the actual `@State` for the view. This is important to keep responsibilities structured and away from the view.
                @Code(name: "Root.swift", file: "essentials-02-06")
            }
            
        }
    }
}
