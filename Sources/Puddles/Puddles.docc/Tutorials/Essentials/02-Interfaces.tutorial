@Tutorial(time: 10) {
    @Intro(title: "Interfaces") {
        Communication between a view and its `Provider` should be unidirectional.
        @Image(source: "Background1.png", alt: "A colorful, abstract background image") 
    }
    
    @Section(title: "Expanding The View Interface") {
        
        In the previous tutorial, we built a simple view with a button that increases a counter value. However, since the view's state is immutable, the button cannot actually update that value itself.  
        
        That's by design. Views should not modify their own public state. Instead, they should define TargetStates (called actions) that their parent `Provider` can observe and act upon.
        
        This can be achieved through the ``Puddles/Interface`` class. It exposes a ``Puddles/Interface/fire(_:)`` method that takes an `Action` (usually an `enum` defined by a view). A `Provider` creates and observes such an interface and provides it to the view. Whenever an action is sent, the `Provider` can detect it and make modifications to the state or start any necessary other work.
        
        Adding this to the example app is easy.
        
        @Steps {
            @Step {
                Open `HomeView` from the previous tutorial.
       
                @Code(name: "HomeView.swift", file: "02-ViewInteractions-01-01") {
                    @Image(source: "02-ViewInteractions-01-01_image", alt: "A screenshot of an iPhone running the app. It shows the home view.")
                }
            }
            
            @Step {
                Add an `Action` enum and and an interface property. 
       
                @Code(name: "HomeView.swift", file: "02-ViewInteractions-01-02")
            }
            
            @Step {
                Inside the button's action closure, use the interface to send the action `.buttonTapped`.
                
                What's important here is that the view is fully unaware of its context or consequences for any of its actions. This is great, because we can place it anywhere in the app and let the responsible `Provider` decide what should happen. 
       
                @Code(name: "HomeView.swift", file: "02-ViewInteractions-01-03")
            }
            
            Now we need to listen to the sent actions in the `Provider`.
            
            @Step {
                Go back to `Root.swift`.
       
                @Code(name: "Root.swift", file: "02-ViewInteractions-01-04")
            }
            
            @Step {
                Initialize the view's interface by providing a closure that handles incoming actions.
       
                @Code(name: "Root.swift", file: "02-ViewInteractions-01-05")
            }
            
            @Step {
                Inside the `handleViewAction(_:)` method, you can update the view's state whenever an action is sent from it.
                
                @Code(name: "Root.swift", file: "02-ViewInteractions-01-06") {
                    @Image(source: "02-ViewInteractions-02-06_image", alt: "A screenshot of an iPhone running the app. It shows the home view.")
                }
            }
        }
    }
}
