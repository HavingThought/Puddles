@Tutorial(time: 10) {
    @Intro(title: "The Navigator") {
        Navigation – like sheets, pushes, or alerts – should be handled by a ``Puddles/Navigator``.
        @Image(source: "Background1.png", alt: "A colorful, abstract background image") 
    }
    
    @Section(title: "Adding a Sheet Presentation") {
        
        Let's modify the example app from the previous tutorials so that it opens a sheet when the button has been tapped 42 times.
        
        To do this, we will build a `RootNavigator` type that takes responsibility for handling navigation.
        
        @Steps {
            @Step {
                Create a new type `RootNavigator.swift` that conforms to `Navigator`.
                
                Its root is the `Root` Provider from the previous tutorials. `StateConfiguration` is a type that defines all states the navigator can be in. To keep it simple, we have a single state `showPage` that we add besides `reset`.
                 
                @Code(name: "RootNavigator.swift", file: "03-BasicNavigation-01-01") {
                    @Image(source: "03-BasicNavigation-01-01_image", alt: "A screenshot of an iPhone running the app. It shows the root view.")
                }
            }
            
            @Step {
                Add a sheet to the root provider and set it to `true` when the state `showPage` is applied.
                
                @Code(name: "RootNavigator.swift", file: "03-BasicNavigation-01-02")
            }
            
            @Step {
                Go back to `Root.swift`.
                
                @Code(name: "Root.swift", file: "03-BasicNavigation-01-03")                
            }
            
            @Step {
                Just like with `HomeView`, add an interface to `Root` to send actions to its navigator.
                
                @Code(name: "Root.swift", file: "03-BasicNavigation-01-04")
            }
            
            @Step {
                Send the action when the count has reached 42.
                
                @Code(name: "Root.swift", file: "03-BasicNavigation-01-05")
            }
            
            @Step {
                Now go back to `RootNavigator.swift`.
                
                @Code(name: "RootNavigator.swift", file: "03-BasicNavigation-01-06")
            }
            
            @Step {
                Connect the interface and handle the action by calling `applyStateConfiguration(.showPage)`.
                
                @Code(name: "RootNavigator.swift", file: "03-BasicNavigation-01-07") {
                    @Image(source: "03-BasicNavigation-01-07_image", alt: "A screenshot of an iPhone running the app. It shows the opened sheet.")
                }
            }
            
            That's it! In the next section, we're going to turn the sheet into a push.
        }
    }
    
    @Section(title: "Adding a Navigation Push") {
        
        Let's turn the sheet presentation into a push presentation inside a `NavigationStack`.
        
        @Steps {
            @Step {
                Go to `RootNavigator.swift`.
                
                @Code(name: "RootNavigator.swift", file: "03-BasicNavigation-02-01")
            }
            
            @Step {
                Add a `NavigationStack` with a path binding.
                
                @Code(name: "RootNavigator.swift", file: "03-BasicNavigation-02-02")
            }
            
            @Step {
                
                Now, add a destination view.
                
                Launch the app to see if it's working.
                
                @Code(name: "RootNavigator.swift", file: "03-BasicNavigation-02-03") {
                    @Image(source: "03-BasicNavigation-02-03_image", alt: "A screenshot of an iPhone running the app. It shows the detail view as a push.")
                }
            }
            
            To keep views agnostic of their environment and context, and to keep them reusable in different places, it is recommended to put things like `navigationTitle` or a `toolbar` in the responsible `Provider`, in this case `Root`.
            
            @Step {
                Go back to `Root.swift`
                
                @Code(name: "Root.swift", file: "03-BasicNavigation-02-04")
            }            
            
            @Step {
                Add a navigation title.
                
                @Code(name: "Root.swift", file: "03-BasicNavigation-02-05") {
                    @Image(source: "03-BasicNavigation-02-05_image", alt: "A screenshot of an iPhone running the app. It shows the home view with the newly added navigation title.")
                }
            }
            
            And just like that you have a working `NavigationStack`, driven by a `Navigator`!
            
        }
    }
}
