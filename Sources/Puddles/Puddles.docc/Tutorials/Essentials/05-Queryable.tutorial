@Tutorial(time: 10) {
    @Intro(title: "Queryables") {
        Closing the gap between actions and their effects.
        
        @Image(source: "Background1.png", alt: "A colorful, abstract background image") 
    }
    
    @Section(title: "The Naive Approach") {
        
        Sometimes an action triggers a flow that requires user input or some form of other delayed and disconnected data to complete. An example of this would be a confirmation dialog for a deletion process.
        
        Such a dialog would typically be triggered in reaction to an action from a view interface. However, the dialog view itself and its completion handlers are defined someplace else. This logically separates the deletion flow and makes it harder to reason about the code. 
        
        Let's add such a deletion flow to `RootNavigator` from previous tutorials.
        
        @Steps {            
            @Step {
                Go to `Root.swift`.
                
                @Code(name: "Root.swift", file: "expectations-01-01")
            }
            
            @Step {
                Add a toolbar button that simulate the "deletion" of something.
                
                The button's action sends an action to the interface.
                                
                @Code(name: "Root.swift", file: "expectations-01-02")
            }
            
            @Step {
                Go to `RootNavigator`.
                
                @Code(name: "RootNavigator.swift", file: "expectations-01-03")
            }
            @Step {
                Add the new action to the interface handler and add a new target state to show the deletion confirmation.
                
                @Code(name: "RootNavigator.swift", file: "expectations-01-04")
            }            
            
            @Step {
                Next, add an alert to the `root` and trigger it inside of `applyTargetState(_:)`.
                
                @Code(name: "RootNavigator.swift", file: "expectations-01-05")
            }

            Finally, we need to add the actual deletion logic that should be triggered upon confirmation. 
            
            @Step {
                Add a `delete()` method and call it in the action handler of the confirmation button inside the alert.
                
                In this case, the cancel button does not need an action, so just leave it empty.
                
                @Code(name: "RootNavigator.swift", file: "expectations-01-06")
            }
            
            That's it! However, in Section 2, we will take a look at a difference approach. 
        }
    }
    
    @Section(title: "A Better Approach") {
        The approach in Section 1 is fine, but it has a significant weakness: We ended up separating logically connected functionality. 
        
        The call to `delete()` is still an effect of the `.didTapShowQueryableDemo` action that we handle in `handleRootAction(_:)`.
        The code, however, is split up, since the confirmation dialog with its completion handlers is defined someplace else.
        
        That's why ``Puddles`` makes use of the [Queryable](https://github.com/SwiftedMind/Queryable) property wrapper. A `Queryable` is a type that can be used to trigger a view presentation from an `async` function and `await` its completion.
        
        @Steps {
            
            Let's modify the example from Section 1 to use Queryables.
            
            @Step {
                Go back to `RootNavigator.swift`. 
                
                @Code(name: "RootNavigator.swift", file: "expectations-02-01")
            }
            
            @Step {
                Replace the `isShowingConfirmationAlert` state variable with a `@Queryable<Bool>` property and the the `alert` with a `queryableAlert`.
                
                The `queryableAlert` consumes a `Queryable` and takes care of the presentation of the alert. In the alert's button actions, resolve the query with a boolean result.
                
                @Code(name: "RootNavigator.swift", file: "expectations-02-02")
            }
            
            @Step {
                Finally, trigger the confirmation alert by calling `query()` in an `async` context. 
                
                The result is identical to the approach from the previous section, but we can now control view presentations from code and await their completion without ever leaving the scope.
                
                @Code(name: "RootNavigator.swift", file: "expectations-02-03")
            }
            
            The entire logical flow caused by the `didTapShowQueryableDemo` action now takes place inside the same call of `queryDeletion()`. If you want to find out more about `Queryable`, have a look at the [documentation](https://github.com/SwiftedMind/Queryable)
        }
    }
}
